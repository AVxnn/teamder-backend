import Notification, { NotificationType } from '../models/Notification';
import User from '../models/User';
import { bot } from '../bot/bot';

class NotificationService {
  // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private async createNotification(
    telegramId: number,
    type: NotificationType,
    message: string,
    data: any = {}
  ) {
    try {
      console.log("Creating notification:", {
        telegramId,
        type,
        message,
        data
      });
      
      const notification = new Notification({
        telegramId,
        type,
        message,
        data
      });
      await notification.save();
      return notification;
    } catch (error) {
      console.error('‚ùå Error creating notification:', error);
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
  private async sendTelegramNotification(telegramId: number, message: string) {
    try {
      await bot.sendMessage(telegramId, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
      
      console.log(`‚úÖ Telegram notification sent to ${telegramId}`);
    } catch (error) {
      console.error('‚ùå Error sending Telegram notification:', error);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
      if (error.code === 'ETELEGRAM') {
        console.error('Telegram API error:', error.description);
      }
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ
  async notifyLike(fromTelegramId: number, toTelegramId: number) {
    const fromUser = await User.findOne({ telegramId: fromTelegramId });
    const toUser = await User.findOne({ telegramId: toTelegramId });
    
    if (!fromUser || !toUser) return;

    const message = `üíñ ${fromUser.username} –ø–æ—Å—Ç–∞–≤–∏–ª(–∞) –≤–∞–º –ª–∞–π–∫!`;
    
    await this.createNotification(
      toTelegramId,
      NotificationType.LIKE,
      message,
      { fromUserId: fromUser._id }
    );

    await this.sendTelegramNotification(toUser.telegramId, message);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É–ø–µ—Ä–ª–∞–π–∫–µ
  async notifySuperLike(fromTelegramId: number, toTelegramId: number) {
    const fromUser = await User.findOne({ telegramId: fromTelegramId });
    const toUser = await User.findOne({ telegramId: toTelegramId });
    
    if (!fromUser || !toUser) return;

    const message = `‚≠ê ${fromUser.username} –ø–æ—Å—Ç–∞–≤–∏–ª(–∞) –≤–∞–º —Å—É–ø–µ—Ä–ª–∞–π–∫!`;
    
    await this.createNotification(
      toTelegramId,
      NotificationType.SUPER_LIKE,
      message,
      { fromUserId: fromUser._id }
    );

    await this.sendTelegramNotification(toUser.telegramId, message);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
  async notifyProfilePending(telegramId: number) {
    const user = await User.findOne({ telegramId });
    if (!user) return;

    const message = 'üìù –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é';
    
    await this.createNotification(
      telegramId,
      NotificationType.PROFILE_PENDING,
      message
    );

    await this.sendTelegramNotification(user.telegramId, message);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
  async notifyProfileApproved(telegramId: number) {
    const user = await User.findOne({ telegramId });
    if (!user) return;

    const message = '‚úÖ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º';
    
    await this.createNotification(
      telegramId,
      NotificationType.PROFILE_APPROVED,
      message
    );

    await this.sendTelegramNotification(user.telegramId, message);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
  async notifyProfileRejected(telegramId: number, comment: string) {
    const user = await User.findOne({ telegramId });
    if (!user) return;

    const message = `‚ùå –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n–ü—Ä–∏—á–∏–Ω–∞: ${comment}`;
    
    await this.createNotification(
      telegramId,
      NotificationType.PROFILE_REJECTED,
      message,
      { moderationComment: comment }
    );

    await this.sendTelegramNotification(user.telegramId, message);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserNotifications(telegramId: number, limit: number = 20) {
    return Notification.find({ telegramId })
      .sort({ createdAt: -1 })
      .limit(limit)
      .populate('data.fromUserId', 'username firstName photoUrl')
      .populate('data.profileId', 'username firstName photoUrl');
  }

  // –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  async markAsRead(notificationId: string) {
    return Notification.findByIdAndUpdate(
      notificationId,
      { isRead: true },
      { new: true }
    );
  }

  // –û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  async markAllAsRead(telegramId: number) {
    return Notification.updateMany(
      { telegramId, isRead: false },
      { isRead: true }
    );
  }
}

export default new NotificationService(); 